// api/uggla.ts
import OpenAI from "openai";
import type { VercelRequest, VercelResponse } from "@vercel/node";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Funktion f√∂r att h√§mta relevanta tips fr√•n Tipsbank via v√•rt tips_search-API
async function fetchTips(query: string) {
  try {
    const rsp = await fetch(`${process.env.VERCEL_URL}/api/tips_search`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ query }),
    });
    const json = await rsp.json();
    return json?.results ?? [];
  } catch (err) {
    console.error("Tips fetch error:", err);
    return [];
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader("Access-Control-Allow-Origin", "*");

  if (req.method === "OPTIONS") {
    res.setHeader("Access-Control-Allow-Headers", "content-type, authorization");
    res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
    return res.status(200).end();
  }

  if (req.method !== "POST") return res.status(405).json({ error: "Use POST" });

  try {
    const { message, context, last_message, original_question } = req.body ?? {};
    if (!message) return res.status(400).json({ error: "Missing user message" });

    // üîí Blockera syfte- och m√•lgruppsfl√∂den h√§r
    if (
      context?.focus_field === "program.purpose" ||
      context?.focus_field === "program.audience_profile"
    ) {
      return res.status(200).json({
        reply:
          "Det h√§r steget hanteras av ett separat fl√∂de i appen. Klicka p√• Uggle-knappen bredvid f√§ltet f√∂r att starta r√§tt process.",
      });
    }

    // üö¶ Kolla om anv√§ndaren just bekr√§ftat ("ja" etc) efter fallback
    const lowerMsg = String(message).trim().toLowerCase();
    const isAffirmative = ["ja", "ja g√§rna", "absolut", "okej", "g√∂r det"].includes(lowerMsg);

    if (
      isAffirmative &&
      last_message?.includes("Jag fokuserar p√• event, m√∂ten och inkludering") &&
      (original_question || context?.original_question)
    ) {
      const baseQuestion = original_question || context?.original_question;

      const prompt = `
Du √§r Ugglan, en svensk eventdesign-assistent. 
Utg√•ngsfr√•ga: "${baseQuestion}".

G√∂r f√∂ljande:
- Omformulera fr√•gan s√• att den tydligt handlar om event, m√∂ten, aktiviteter eller inkludering. 
- Ge sedan ett kort och praktiskt svar som GUIDAR anv√§ndaren (t.ex. vad de kan t√§nka p√•, vilka steg de kan ta, eller en enkel mall).
- Ge aldrig ett f√§rdigt svar som om du sj√§lv vore leverant√∂ren (t.ex. skriv inte offertbrev, inbjudningar eller f√§rdiga mail).
- Skriv alltid p√• svenska, enkelt och praktiskt.
      `.trim();

      const rsp2 = await client.responses.create({
        model: "gpt-4o-mini",
        input: [{ role: "system", content: prompt }],
      });

      const reply2 = (rsp2 as any).output_text ?? "Jag har tyv√§rr inget bra svar just nu.";
      return res.status(200).json({ reply: reply2, tips_used: 0 });
    }

    // 1. H√§mta tips fr√•n Tipsbank
    const tips = await fetchTips(message);

    // 2. Formatera tipsen
    const inspiredTips = tips.length
      ? tips.map((t: any, i: number) => `${i + 1}. ${t.title}: ${t.content}`).join("\n")
      : "Inga relevanta interna tips hittades.";

    // 3. Systemprompt
    const SYSTEM_PROMPT = `
Du √§r "Ugglan", en svensk eventdesign-assistent i Bentigo.

- Du svarar bara p√• fr√•gor som har koppling till event, m√∂ten, aktiviteter eller inkludering.
- Tolka alltid ord som "f√∂rel√§sare", "talare", "moderator", "program", "inslag", "√∂vning" eller "aktivitet" som eventrelaterade.
- Om en fr√•ga verkligen inte g√•r att koppla till dessa omr√•den:
  ‚Ä¢ Ge svaret: "Jag fokuserar p√• event, m√∂ten och inkludering. Vill du att jag hj√§lper dig koppla din fr√•ga till det omr√•det?"
  ‚Ä¢ Spara den ursprungliga fr√•gan i context.original_question f√∂r n√§sta steg.
- Om anv√§ndaren sedan bekr√§ftar ("ja" etc): omformulera fr√•gan till event-kontext och ge ett guidande, inte levererande, svar.

- Svara alltid p√• svenska, aldrig p√• engelska.
- Svara kortfattat, v√§nligt och praktiskt.
- Anv√§nd enkelt, vardagligt spr√•k men korrekt grammatik.
- Undvik konstiga uttryck som 't√§nda motivationen'.
- Anv√§nd ist√§llet vanliga ord som '√∂ka motivationen', 'st√§rka gemenskapen', 'att arbetet k√§nns mer inspirerande'.

- Hantera inte syfte- eller m√•lgruppsprocesser h√§r.
- Om anv√§ndaren ber om analys av ett program: ge exakt 3 konkreta justeringar.
- Om anv√§ndaren ber om aktivitet/√∂vning/inslag: ge huvudf√∂rslag + variationer f√∂r HOPA + NPF-anpassningar.
- Om fr√•gan √§r faktabaserad: svara kort och praktiskt.

- Ge aldrig ett f√§rdigt leverant√∂rssvar (t.ex. offert eller mail). Hj√§lp bara anv√§ndaren med guidning, exempel eller mallar.

HOPA ‚Äì Human Oriented Participation Architecture:
- Analytiker uppskattar struktur och reflektion.
- Interakt√∂rer gillar samarbete och energi.
- Vision√§rer drivs av syfte och helhet.

[APP CONTEXT]
${JSON.stringify(context ?? {}, null, 2)}

[INSPIRED TIPS]
${inspiredTips}
    `.trim();

    // 4. Skicka till OpenAI
    const rsp = await client.responses.create({
      model: "gpt-4o-mini",
      input: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "developer", content: "APP CONTEXT: " + JSON.stringify(context) },
        { role: "user", content: String(message ?? "") },
      ],
    });

    const reply = (rsp as any).output_text ?? "Ho-ho-hooray, hur kan jag hj√§lpa dig?";
    res
      .status(200)
      .json({ reply, tips_used: tips.length, original_question: message });
  } catch (err: any) {
    res.status(500).json({ error: String(err?.message ?? err) });
  }
}
