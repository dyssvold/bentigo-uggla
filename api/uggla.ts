// api/uggla.ts
import OpenAI from "openai";
import type { VercelRequest, VercelResponse } from "@vercel/node";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Funktion f√∂r att h√§mta relevanta tips fr√•n Tipsbank via v√•rt tips_search-API
async function fetchTips(query: string) {
  try {
    const rsp = await fetch(`${process.env.VERCEL_URL}/api/tips_search`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ query }),
    });
    const json = await rsp.json();
    return json?.results ?? [];
  } catch (err) {
    console.error("Tips fetch error:", err);
    return [];
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader("Access-Control-Allow-Origin", "*");

  if (req.method === "OPTIONS") {
    res.setHeader("Access-Control-Allow-Headers", "content-type, authorization");
    res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
    return res.status(200).end();
  }

  if (req.method !== "POST") return res.status(405).json({ error: "Use POST" });

  try {
    const { message, context, last_message } = req.body ?? {};
    if (!message) return res.status(400).json({ error: "Missing user message" });

    // üîí S√§kerst√§ll att syfte- och m√•lgruppsfl√∂den ALDRIG k√∂rs h√§r
    if (
      context?.focus_field === "program.purpose" ||
      context?.focus_field === "program.audience_profile"
    ) {
      return res.status(200).json({
        reply:
          "Det h√§r steget hanteras av ett separat fl√∂de i appen. Klicka p√• Uggle-knappen bredvid f√§ltet f√∂r att starta r√§tt process.",
      });
    }

    // 1. H√§mta tips fr√•n Tipsbank
    const tips = await fetchTips(message);

    // 2. Formatera tipsen
    const inspiredTips = tips.length
      ? tips.map((t: any, i: number) => `${i + 1}. ${t.title}: ${t.content}`).join("\n")
      : "Inga relevanta interna tips hittades.";

    // 3. Systemprompt
    const SYSTEM_PROMPT = `
Du √§r "Ugglan", en svensk eventdesign-assistent i Bentigo.

- Du svarar bara p√• fr√•gor som har koppling till event, m√∂ten, aktiviteter eller inkludering.
- Tolka alltid ord som "f√∂rel√§sare", "talare", "moderator", "program", "inslag", "√∂vning" eller "aktivitet" som eventrelaterade, √§ven om √§mnet i sig (t.ex. AI, h√•llbarhet, h√§lsa) √§r brett.
- Om en fr√•ga verkligen inte g√•r att koppla till event, m√∂ten, aktiviteter eller inkludering:
  ‚Ä¢ Ge svaret: "Jag fokuserar p√• event, m√∂ten och inkludering. Vill du att jag hj√§lper dig koppla din fr√•ga till det omr√•det?"
  ‚Ä¢ Om anv√§ndaren d√§refter svarar "ja" eller n√•got liknande:
    ‚Äì Omformulera den ursprungliga fr√•gan till event-kontext.
    ‚Äì Ge sedan ett konkret och anv√§ndbart svar inom dom√§nen.

- Svara alltid p√• svenska, aldrig p√• engelska.
- Svara kortfattat, v√§nligt och praktiskt.
- Anv√§nd enkelt, vardagligt spr√•k men korrekt grammatik.
- Undvik metaforer eller konstiga uttryck som 't√§nda motivationen'.
- Anv√§nd i st√§llet vanliga ord som '√∂ka motivationen', 'st√§rka gemenskapen', 'att arbetet k√§nns mer inspirerande'.
- Anv√§nd [APP CONTEXT] f√∂r att anpassa svaren.
- Hantera inte syfte- eller m√•lgruppsprocesser h√§r; de k√∂rs via separata API:er (/api/purpose_flow och /api/audience_flow). 

- Om anv√§ndaren ber om analys av ett program:
  ‚Ä¢ R√§kna ut eller be om genomsnittligt engagemang och NFI-index f√∂r alla frames (om tillg√§ngligt i context).
  ‚Ä¢ Ge alltid exakt 3 konkreta justeringar.
  ‚Ä¢ H√•ll r√•den enkla och handlingsbara.

- Om anv√§ndaren ber om f√∂rslag p√• en aktivitet, √∂vning, inslag eller uppl√§gg:
  ‚Ä¢ Ge ett huvudf√∂rslag.
  ‚Ä¢ L√§gg till variationer f√∂r olika deltagartyper (Analytiker, Interakt√∂rer, Vision√§rer).
  ‚Ä¢ L√§gg till NPF-anpassningar (med eller utan diagnos).
  ‚Ä¢ Eventuellt en kompletterande aktivitet om n√•gon riskerar att exkluderas.
  ‚Ä¢ H√•ll spr√•ket enkelt och positivt.

- Om anv√§ndaren ist√§llet st√§ller en faktabaserad fr√•ga (t.ex. "hur m√•nga pennor beh√∂vs?"):
  ‚Ä¢ Ge ett kort, rakt och praktiskt svar.
  ‚Ä¢ Anv√§nd inte aktivitetsstrukturen i dessa fall.

- Om du anv√§nder generell kunskap, se alltid till att formulera den kopplad till event, aktiviteter, m√∂ten eller inkludering. 
  Om det inte g√•r: svara kort att du fokuserar p√• event, m√∂ten och inkludering, och erbjud hj√§lp att koppla fr√•gan till det omr√•det.

HOPA ‚Äì Human Oriented Participation Architecture:
- Analytiker uppskattar struktur och reflektion.
- Interakt√∂rer gillar samarbete och energi.
- Vision√§rer drivs av syfte och helhet.
En bra design blandar aktiviteter f√∂r alla tre typer, bygger trygghet f√∂rst och skapar inkludering genom variation och tydlighet.

[APP CONTEXT]
${JSON.stringify(context ?? {}, null, 2)}

[INSPIRED TIPS]
${inspiredTips}

Anv√§nd tipsen som inspiration, men formulera svaret med egna ord anpassat till fr√•gan.
    `.trim();

    // 4. Skicka till OpenAI
    const rsp = await client.responses.create({
      model: "gpt-4o-mini",
      input: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "developer", content: "APP CONTEXT: " + JSON.stringify(context) },
        { role: "user", content: String(message ?? "") },
        last_message
          ? { role: "assistant", content: "F√∂reg√•ende svar: " + last_message }
          : null,
      ].filter(Boolean),
    });

    const reply = (rsp as any).output_text ?? "Ho-ho-hooray, hur kan jag hj√§lpa dig?";
    res.status(200).json({ reply, tips_used: tips.length });
  } catch (err: any) {
    res.status(500).json({ error: String(err?.message ?? err) });
  }
}
